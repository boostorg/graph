# Copyright (C) 2007-2009 Andrew Sutton
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import ../../config/checks/config : requires ;
import modules ;
import path ;
import pch ;

path-constant TEST_DIR : . ;


local pchs ;

for local hpp in [ glob-tree *.hpp ] {
    cpp-pch $(hpp:B) : $(hpp) : <include>include ;
    explicit $(hpp:B) ;
    pchs += $(hpp:B) ;
}
alias headers : $(pchs) ;

run $(headers) accum-compile-times.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat $(TEST_DIR)/target-compile-costs.dat ;
exe $(headers) actor_clustering : actor_clustering.cpp ;
run $(headers) adj_list_ra_edgelist.cpp ;
run $(headers) adjacency_list.cpp ;
run $(headers) adjacency_list_io.cpp ;
run $(headers) adjacency_matrix.cpp ;
run $(headers) astar-cities.cpp ;
run $(headers) astar_maze.cpp ;
run $(headers) bellman-example.cpp ;
run $(headers) bellman-ford-internet.cpp ;
run $(headers) bfs.cpp ;
run $(headers) bfs_neighbor.cpp ;
run $(headers) bfs-example.cpp ;
run $(headers) bfs-example2.cpp ;
run $(headers) bfs-name-printer.cpp ;
run $(headers) biconnected_components.cpp ;
run $(headers) bipartite_example.cpp ;
run $(headers) boost_web_graph.cpp : $(TEST_DIR)/boost_web.dat ;
exe $(headers) boykov_kolmogorov-eg : boykov_kolmogorov-eg.cpp ;
exe $(headers) bron_kerbosch_clique_number : bron_kerbosch_clique_number.cpp ;
exe $(headers) bron_kerbosch_print_cliques : bron_kerbosch_print_cliques.cpp ;
run $(headers) bucket_sorter.cpp ;
run $(headers) canonical_ordering.cpp ;
run $(headers) city_visitor.cpp ;
exe $(headers) closeness_centrality : closeness_centrality.cpp ;
exe $(headers) clustering_coefficient : clustering_coefficient.cpp ;
run $(headers) components_on_edgelist.cpp ;
run $(headers) connected_components.cpp ;
run $(headers) connected-components.cpp ;
run $(headers) container_gen.cpp ;
run $(headers) copy-example.cpp ;
run $(headers) csr-example.cpp ;
run $(headers) cuthill_mckee_ordering.cpp ;
run $(headers) cycle_canceling_example.cpp ;
run $(headers) cycle_ratio_example.cpp ;
run $(headers) cycle-file-dep.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) cycle-file-dep2.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) dag_shortest_paths.cpp ;
run $(headers) dave.cpp ;
run $(headers) default-constructor.cpp : $(TEST_DIR)/makefile-dependencies.dat ;
run $(headers) default-constructor2.cpp : $(TEST_DIR)/makefile-dependencies.dat ;
exe $(headers) degree_centrality : degree_centrality.cpp ;
run $(headers) dfs.cpp ;
run $(headers) dfs_parenthesis.cpp ;
run $(headers) dfs-example.cpp ;
run $(headers) dijkstra-example.cpp ;
run $(headers) dijkstra-example-listS.cpp ;
run $(headers) dijkstra-no-color-map-example.cpp ;
run $(headers) directed_graph.cpp ;
exe $(headers) eccentricity : eccentricity.cpp ;
run $(headers) edge_basics.cpp ;
run $(headers) edge_coloring.cpp ;
run $(headers) edge_iterator_constructor.cpp : $(TEST_DIR)/edge_iterator_constructor.dat ;
run $(headers) edge_property.cpp ;
run $(headers) edge-function.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) edge-iter-constructor.cpp : $(TEST_DIR)/makefile-dependencies.dat ;
exe $(headers) edmonds-karp-eg : edmonds-karp-eg.cpp ;
run $(headers) exterior_properties.cpp ;
run $(headers) exterior_property_map.cpp ;
run $(headers) family_tree.cpp ;
run $(headers) fibonacci_heap.cpp ;
run $(headers) file_dependencies.cpp ;
run $(headers) filtered_graph.cpp ;
run $(headers) filtered_graph_edge_range.cpp ;
run $(headers) filtered_vec_as_graph.cpp ;
run $(headers) filtered-copy-example.cpp ;
exe $(headers) fr_layout : fr_layout.cpp ;
run $(headers) gerdemann.cpp ;
run $(headers) graph.cpp ;
run $(headers) graph_as_tree.cpp ;
run $(headers) graph_property.cpp ;
run $(headers) graph-assoc-types.cpp ;
run $(headers) graph-property-iter-eg.cpp ;
run $(headers) graph-thingie.cpp ../build//boost_graph ;
run $(headers) graphviz.cpp ../build//boost_graph : $(TEST_DIR)/graphviz_example.dot ;
run $(headers) grid_graph_example.cpp ;
run $(headers) grid_graph_properties.cpp ;
exe $(headers) hawick_circuits : hawick_circuits.cpp ;
run $(headers) implicit_graph.cpp ;
run $(headers) in_edges.cpp ;
exe $(headers) inclusive_mean_geodesic : inclusive_mean_geodesic.cpp ;
run $(headers) incremental_components.cpp ;
run $(headers) incremental-components-eg.cpp ;
exe $(headers) influence_prestige : influence_prestige.cpp ;
run $(headers) interior_pmap_bundled.cpp ;
run $(headers) interior_property_map.cpp ;
run $(headers) isomorphism.cpp ;
run $(headers) iteration_macros.cpp ;
run $(headers) iterator-property-map-eg.cpp ;
run $(headers) johnson-eg.cpp ;
run $(headers) kevin-bacon.cpp : $(TEST_DIR)/kevin-bacon.dat ;
run $(headers) king_ordering.cpp ;
run $(headers) knights_tour.cpp ;
run $(headers) kruskal-example.cpp ;
run $(headers) kuratowski_subgraph.cpp ;
run $(headers) make_biconnected_planar.cpp ;
run $(headers) make_connected.cpp ;
run $(headers) make_maximal_planar.cpp ;
run $(headers) matching_example.cpp ;
exe $(headers) max_flow : max_flow.cpp ;
run $(headers) mcgregor_subgraphs_example.cpp ;
exe $(headers) mean_geodesic : mean_geodesic.cpp ;
exe $(headers) minimum_degree_ordering : minimum_degree_ordering.cpp ;
run $(headers) modify_graph.cpp ;
run $(headers) neighbor_bfs.cpp ;
run $(headers) ospf-example.cpp ../build//boost_graph : $(TEST_DIR)/figs/ospf-graph.dot $(TEST_DIR)/figs/ospf-sptree.dot $(TEST_DIR)/routing-table.dat ;
run $(headers) parallel-compile-time.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat $(TEST_DIR)/target-compile-costs.dat ;
run $(headers) planar_face_traversal.cpp ;
run $(headers) prim-example.cpp ;
run $(headers) print-adjacent-vertices.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) print-edges.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) print-in-edges.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) print-out-edges.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
exe $(headers) property_iterator : property_iterator.cpp ;
run $(headers) property-map-traits-eg.cpp ;
exe $(headers) push-relable : push-relabel-eg.cpp ;
run $(headers) put-get-helper-eg.cpp ;
run $(headers) quick_tour.cpp ;
run $(headers) quick-tour.cpp ;
run $(headers) r_c_shortest_paths_example.cpp ;
run $(headers) read_graphviz.cpp ../build//boost_graph ;
exe $(headers) read_write_dimacs : read_write_dimacs-eg.cpp ;
run $(headers) remove_edge_if_bidir.cpp ;
run $(headers) remove_edge_if_dir.cpp ;
run $(headers) remove_edge_if_undir.cpp ;
run $(headers) reverse_graph.cpp ;
exe $(headers) scaled_closeness_centrality : scaled_closeness_centrality.cpp ;
run $(headers) simple_planarity_test.cpp ;
run $(headers) sloan_ordering.cpp ;
run $(headers) stoer_wagner.cpp ;
run $(headers) straight_line_drawing.cpp ;
run $(headers) strong-components.cpp ;
run $(headers) subgraph.cpp ;
run $(headers) subgraph_properties.cpp ;
run $(headers) successive_shortest_path_nonnegative_weights_example.cpp ;
exe $(headers) tiernan_girth_circumference : tiernan_girth_circumference.cpp ;
exe $(headers) tiernan_print_cycles : tiernan_print_cycles.cpp ;
run $(headers) topo_sort.cpp ;
run $(headers) topo-sort1.cpp ;
run $(headers) topo-sort2.cpp ;
run $(headers) topo-sort-file-dep.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) topo-sort-file-dep2.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) transitive_closure.cpp ;
run $(headers) transpose-example.cpp ;
run $(headers) two_graphs_common_spanning_trees.cpp ;
run $(headers) undirected_adjacency_list.cpp ;
run $(headers) undirected_dfs.cpp ;
run $(headers) undirected_graph.cpp ;
run $(headers) vector_as_graph.cpp ;
run $(headers) vertex_basics.cpp ;
run $(headers) vertex-name-property.cpp : $(TEST_DIR)/makefile-dependencies.dat $(TEST_DIR)/makefile-target-names.dat ;
run $(headers) vf2_sub_graph_iso_example.cpp ;
run $(headers) vf2_sub_graph_iso_multi_example.cpp ;
run $(headers) visitor.cpp ;
run $(headers) write_graphviz.cpp ;

#
# These require LEDA:
#
run $(headers) leda-graph-eg.cpp ;
run $(headers) leda-concept-check.cpp ;
run $(headers) topo-sort-with-leda.cpp ;
explicit leda-graph-eg ;
explicit leda-concept-check ;
explicit topo-sort-with-leda ;

#
# These require standford-graph:
#
run $(headers) miles_span.cpp ;
explicit miles_span ;
run $(headers) roget_components.cpp ;
explicit roget_components ;
run $(headers) topo-sort-with-sgb.cpp ;
explicit topo-sort-with-sgb ;
run $(headers) girth.cpp ;
explicit girth ;

#
# This example appears incorrect:
#
#run min_max_paths.cpp ;

#
# These all use an interface that has been removed:
#
#run kruskal-telephone.cpp ;
#run loops_dfs.cpp ;
#run scc.cpp ;
#run reachable-loop-head.cpp ;
#run cc-internet.cpp ;
#run reachable-loop-tail.cpp ;
#run prim-telephone.cpp ;
#run dfs-parenthesis.cpp ;
#run edge_connectivity.cpp ;
#run edge-connectivity.cpp ;
#
# These compile, but still use the old graphviz interface and die and runtime:
# run strong_components.cpp ../build//boost_graph ;


#
# Use API that's not defined for this graph type, clear bug?
#
# run labeled_graph.cpp ;
#
# This one crashes at runtime:
#
# run kevin-bacon2.cpp /boost/serialization//boost_serialization : $(TEST_DIR)/kevin-bacon.dat ;
# Crashes with msvc-12.0:
# run last-mod-time.cpp : $(TEST_DIR)/makefile-dependencies.dat ;
#
# This one dereferences a null-iterator:
#
# run ordered_out_edges.cpp ;

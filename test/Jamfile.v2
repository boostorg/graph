# Copyright (c) 2002 Trustees of Indiana University
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

# Define SGB (stanford graph base top level directory) and
# LEDA (also top level directory) at the command line of jam using -s

import testing ;
import path ;
import pch ;


path-constant TEST_DIR : . ;

path-constant PLANAR_INPUT_FILES : ./planar_input_graphs ;

path-constant CYCLE_RATIO_INPUT_FILE : ./cycle_ratio_s382.90.dot ;

path-constant METIS_INPUT_FILE : ./weighted_graph.gr ;

# project : requirements <toolset>gcc <toolset>clang ;


local pchs ;

for local hpp in [ glob-tree *.hpp ] {
    cpp-pch $(hpp:B) : $(hpp) : <include>include ;
    explicit $(hpp:B) ;
    pchs += $(hpp:B) ;
}
alias headers : $(pchs) ;


alias graph_test_regular :
    # test_graphs will eventually defined a framework for testing the structure
    # and implementation of graph data structures and adaptors.
    [ run $(headers) test_graphs.cpp ]
    [ run $(headers) index_graph.cpp ]     # TODO: Make this part of the test_graphs framework
    [ run $(headers) labeled_graph.cpp ]
    [ run $(headers) finish_edge_bug.cpp ]

    [ run $(headers) transitive_closure_test.cpp /boost/timer//boost_timer ]
    [ run $(headers) transitive_closure_test2.cpp ]
    [ compile $(headers) adj_list_cc.cpp ]

    #[ run $(headers) adj_list_invalidation.cpp ]
    [ run $(headers) adj_list_edge_list_set.cpp ]
    [ run $(headers) adj_list_loops.cpp ]
    [ compile $(headers) adj_matrix_cc.cpp ]
    [ run $(headers) bfs.cpp ]
    [ compile $(headers) bfs_cc.cpp ]
    [ run $(headers) bellman-test.cpp ]
    [ run $(headers) betweenness_centrality_test.cpp : 100 ]
    [ run $(headers) bidir_remove_edge.cpp ]
    [ run $(headers) bipartite_test.cpp ]
    [ run $(headers) csr_graph_test.cpp : : : : : <variant>release ]
    [ run $(headers) dag_longest_paths.cpp ]
    [ run $(headers) dfs.cpp ]
    [ run $(headers) undirected_dfs.cpp ]
    [ compile $(headers) dfs_cc.cpp ]
    [ compile $(headers) dijkstra_cc.cpp ]
    [ run $(headers) dijkstra_heap_performance.cpp /boost/timer//boost_timer : 10000 ]
    [ run $(headers) dijkstra_no_color_map_compare.cpp : 10000 ]
    [ run $(headers) disjoint_set_test.cpp ]
    [ run $(headers) dominator_tree_test.cpp ]

    # Unused and deprecated.
    #[ run $(headers) relaxed_heap_test.cpp : 5000 15000 ]

    [ compile $(headers) edge_list_cc.cpp ]
    [ compile $(headers) filtered_graph_cc.cpp ]
    [ run $(headers) filter_graph_vp_test.cpp ]
    [ run $(headers) generator_test.cpp ]
    [ run $(headers) graph.cpp ]
    [ compile $(headers) graph_concepts.cpp ]
    [ run $(headers) graphviz_test.cpp
            /boost/test//boost_test_exec_monitor/<link>static
            ../build//boost_graph
            ../../regex/build//boost_regex : --log_level=all ]
    [ run $(headers) metis_test.cpp : $(METIS_INPUT_FILE) ]
    [ run $(headers) gursoy_atun_layout_test.cpp ]
    [ run $(headers) layout_test.cpp : : : <test-info>always_show_run_output <toolset>intel:<debug-symbols>off ]

    [ run $(headers) serialize.cpp
          ../../serialization/build//boost_serialization
      : : : ]

    [ compile $(headers) reverse_graph_cc.cpp ]
    [ run $(headers) sequential_vertex_coloring.cpp ]

    # TODO: Merge these into a single test framework.
    [ run $(headers) subgraph.cpp ]
    [ run $(headers) subgraph_bundled.cpp ]
    [ run $(headers) subgraph_add.cpp ../../test/build//boost_unit_test_framework/<link>static : $(TEST_DIR) ]
    [ run $(headers) subgraph_props.cpp ]

    [ run $(headers) isomorphism.cpp ]
    [ run $(headers) adjacency_matrix_test.cpp ]
    [ compile $(headers) vector_graph_cc.cpp ]
    [ compile $(headers) copy.cpp ]
    [ compile $(headers) swap.cpp ]
    [ compile $(headers) property_iter.cpp ]
    [ run $(headers) bundled_properties.cpp ]
    [ run $(headers) floyd_warshall_test.cpp ]
    [ run $(headers) astar_search_test.cpp ]
    [ run $(headers) biconnected_components_test.cpp ]
    [ run $(headers) min_degree_empty.cpp ]
    [ run $(headers) cuthill_mckee_ordering.cpp ]
    [ run $(headers) king_ordering.cpp ]
    [ run $(headers) matching_test.cpp ]
    [ run $(headers) weighted_matching_test.cpp ]
    [ run $(headers) max_flow_test.cpp ]
    [ run $(headers) boykov_kolmogorov_max_flow_test.cpp ]
    [ run $(headers) cycle_ratio_tests.cpp ../build//boost_graph ../../regex/build//boost_regex : $(CYCLE_RATIO_INPUT_FILE) ]
    [ run $(headers) basic_planarity_test.cpp ]
    [ run $(headers) make_connected_test.cpp ]
    [ run $(headers) make_bicon_planar_test.cpp ]
    [ run $(headers) make_maximal_planar_test.cpp ]
    [ run $(headers) named_vertices_test.cpp ]
    [ run $(headers) r_c_shortest_paths_test.cpp ]
    [ run $(headers) rcsp_custom_vertex_id.cpp ]
    [ run $(headers) is_straight_line_draw_test.cpp ]
    [ run $(headers) metric_tsp_approx.cpp /boost/timer//boost_timer : metric_tsp_approx.graph : : ]
    [ compile $(headers) dimacs.cpp ]
    [ run $(headers) bron_kerbosch_all_cliques.cpp ]
    [ run $(headers) tiernan_all_cycles.cpp ]
    [ run $(headers) closeness_centrality.cpp ]
    [ run $(headers) degree_centrality.cpp ]
    [ run $(headers) mean_geodesic.cpp ]
    [ run $(headers) eccentricity.cpp ]
    [ run $(headers) clustering_coefficient.cpp ]
    [ run $(headers) core_numbers_test.cpp ]
    [ run $(headers) read_propmap.cpp ]
    [ run $(headers) mcgregor_subgraphs_test.cpp ../build//boost_graph ]
    [ compile $(headers) grid_graph_cc.cpp ]
    [ run $(headers) grid_graph_test.cpp ]
    [ run $(headers) incremental_components_test.cpp ]
    [ run $(headers) two_graphs_common_spanning_trees_test.cpp ]
    [ run $(headers) random_spanning_tree_test.cpp ../build//boost_graph ]
    [ run $(headers) random_matching_test.cpp : 1000 1020 ]
    [ run $(headers) graphml_test.cpp ../build//boost_graph : : "graphml_test.xml" ]
    [ run $(headers) mas_test.cpp ../../test/build//boost_unit_test_framework/<link>static : $(TEST_DIR) ]
    [ run $(headers) stoer_wagner_test.cpp ../../test/build//boost_unit_test_framework/<link>static : $(TEST_DIR) ]
    [ compile $(headers) filtered_graph_properties_dijkstra.cpp ]
    [ run $(headers) vf2_sub_graph_iso_test.cpp ]
    [ run $(headers) vf2_sub_graph_iso_test_2.cpp ]
    [ run $(headers) hawick_circuits.cpp ]
    [ run $(headers) successive_shortest_path_nonnegative_weights_test.cpp ../../test/build//boost_unit_test_framework/<link>static ]
    [ run $(headers) cycle_canceling_test.cpp ../../test/build//boost_unit_test_framework/<link>static ]
    [ run $(headers) strong_components_test.cpp ]
    [ run $(headers) find_flow_cost_bundled_properties_and_named_params_test.cpp ../../test/build//boost_unit_test_framework/<link>static ]
    [ run $(headers) max_flow_algorithms_bundled_properties_and_named_params.cpp ../../test/build//boost_unit_test_framework/<link>static ]
    [ run $(headers) delete_edge.cpp ]
    [ run $(headers) johnson-test.cpp ]
    [ run $(headers) lvalue_pmap.cpp ]
    ;

alias graph_test_with_filesystem : :
        # The tests below started failing to compile for xcode with cxxstd=11
        # due to issues with constexpr ctors in Boost.Filesystem
        <target-os>darwin
        <cxxstd>11
    ;

alias graph_test_with_filesystem :
    [ run $(headers) all_planar_input_files_test.cpp
        ../../filesystem/build
        ../../system/build
        : $(PLANAR_INPUT_FILES) ]
    [ run $(headers) parallel_edges_loops_test.cpp
        ../../filesystem/build
        ../../system/build
        : $(PLANAR_INPUT_FILES) ]
    ;

test-suite graph_test :
    graph_test_regular
    graph_test_with_filesystem
    ;

# Run SDB tests only when -sSDB= is set.
local SDB = [ modules.peek : SDB ] ;
if $(SDB)
{
    local sdb-root = [ path.root [ path.make $(SDB) ] [ path.pwd ] ] ;

    compile stanford_graph_cc.cpp :
        <include>$(sdb-root) ;
}

# Run LEDA tests only when -sLEDA= is set.
local LEDA = [ modules.peek : LEDA ] ;
if $(LEDA)
{
    local leda-root = [ path.root [ path.make $(LEDA) ] [ path.pwd ] ] ;
    local leda-include = [ path.join $(leda-root) incl ] ;

    compile leda_graph_cc.cpp :
        <include>$(leda-include) ;
}

build-project ../example ;
